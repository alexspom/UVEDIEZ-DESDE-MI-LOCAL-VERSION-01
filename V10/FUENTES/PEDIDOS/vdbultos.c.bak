/****
* VDBULTOS.C
*                                                    
* Propósito: Procesos y algoritmos en C propios del tratamiento de bultos
*                                            
* Autor  : FPD
* Fecha  : 28-3-2008                                                        
******
*  Modificaciones:
****/

#include "VDPEDIDOS.H"


static int creacabecerabulto(vdpedidocabs *pec,vdbultocabs *buc,char *tipobulto,char *codart,char *digitoean,int *nbcnt,int *nbemba,int *nbuni) {

	int ret=0;
	vdartics art;
	vdbultos bulto;

	//rellenamos datos de la cabecera del bulto
    memset(buc,0,sizeof(*buc));
	strcpy(buc->coddiv,pec->coddiv);
    buc->anoped=pec->anoped;
    strcpy(buc->codped,pec->codped);
    buc->seqped=pec->seqped;
	*buc->swtanular=*pec->swtanular; //preguntar como se comporta el anular, por si se mira del articulo
    buc->status=STBUCCREADO;
	*buc->tipobulto=*tipobulto;
	buc->feccreado=damedate();
    cent2a(gettime(),0,':',buc->horacreado);

	switch(*buc->tipobulto) {
		case 'C':
			buc->nbulto=(*nbcnt)++;
			break;
		case 'E':
			buc->nbulto=(*nbemba)++;
			break;
		case 'U': 
			if (*buc->tipovol==0) { //si el bulto no tiene volumetria se obtiene del artículo
                ret=ARTselcodart(codart,&art);
                strcpy(buc->tipovol,art.tipovol);
            }
            //si el bulto es de unidades y el pedido ya tiene bultos por volumetría no hacemos nada
			if (!BUCbuscabultostipoyvolu(pec->coddiv,pec->anoped,pec->codped,pec->seqped,buc->tipobulto,buc->tipovol,buc))
				return(0);
			buc->nbulto=(*nbuni)++;
            break;	
	}
       
	if (*buc->tipobulto=='U') {		
		BULTObuscasecbultotmp(digitoean,&bulto);
		strcpy(buc->codbulto,bulto.secbultotmp);
	}
	else {
		BULTObuscacodbulto(digitoean,pec->coddiv,&bulto);
		strcpy(buc->codbulto,bulto.codbulto);
	}
    if(!ret) ret=BUCinsert(buc,VERIFICA);
    if (ret) 
       v10log(LOGERROR,"creabulto: Error insertando bultos de pedido %s %d %s %d\n", pec->coddiv,pec->anoped,pec->codped,pec->seqped);
    return(ret);
}

static int crealineasbulto(vdmovims *mov,vdpedidocabs *pec,vdbultocabs *buc,double cantidad)
{
    vdbultolins bul;
    vdpedidolins pel;
	vdbultos bulto;
    int ret,bulconlin=0;

	memset(&pel,0,sizeof(pel));	
    ret=PELbuscapedlinpordemanda(mov->tipodemanda,mov->coddemanda,mov->lindemanda,&pel);

	if (*buc->tipobulto=='U') {
		if (*pel.codlot==0) 
			ret=BULbuscabulcodart(buc->codbulto,mov->codart,&bul);
		else 
			ret=BULbuscabulcodartcodlot(buc->codbulto,mov->codart,pel.codlot,&bul);
		if (!ret) { //si existe una línea de bulto para ese artículo o artículo - lote
			if (bul.codmov==mov->codmov && !strcmp(bul.codlot,pel.codlot)) { //si es del mismo mov y lote
				bul.cantpedida+=cantidad;
				ret=BULactualizacantpedida(&bul,NOVERIFICA);
				bulconlin=1;
			}
		}
	}
	if (bulconlin) return(ret);
	else {
        memset(&bul,0,sizeof(bul));
        strcpy(bul.codlot,pel.codlot);
        strcpy(bul.codbulto,buc->codbulto);
        strcpy(bul.codart,mov->codart);
        bul.codmov=mov->codmov;
        bul.cantpedida=cantidad;
        bul.status=STBULASERVIR;
        BULTObuscasecuencia(buc->codbulto,&bulto);
		bul.seqlinea=bulto.secuencia;
        ret=BULinsert(&bul,NOVERIFICA);	
	}
    return(ret);
}


// Finaliza un bulto de pedido
// PARAM1: (ptr) puntero al bulto
// PARAM2: (param) parámetros del algoritmo
VDEXPORT int vdfinbulto(void *ptr,char *param) {
	int ret;
	char actpelin[LSWITCH]="";
    vdstatuss stfinbulto,stpedido;
	vdbultos bulto;
    vdbultocabs *buc=ptr;

    if (ret=damestabreviada("vdfinbulto",param, 1, "#", NULL, "BUC", &stfinbulto, STBUCFINALIZADO)) return(ret);
    if (ret=damestabreviada("vdfinbulto",param, 2, "#", NULL, "PEC", &stpedido, STPECENEXPED)) return(ret);
    if ((ret=piece(param,actpelin,"#",3)) < 0) *actpelin='N';

    BULTOprocfinbulto(buc->codbulto,stfinbulto.status,stpedido.status,actpelin,0,&bulto);
    if (bulto.ret) {
		v10log(LOGERROR,"vdfinbulto: Error ejecutando VDBULTO.FINBULTO(%s,%ld)\n",buc->codbulto,stfinbulto.status);
		return(ret);
	}

	buc->status=stfinbulto.status;
	v10log(LOGNORMAL,"vdfinbulto: Bulto finalizado. %s \n",BUClog(buc));
	return 0;
}



static int ejecutaalgoritmos(procesos *proceso,vdbultocabs *buc) {
    
    int ret;
	vdpedidocabs pec;
    
	ret=PECselvdpedidocab(buc->coddiv,buc->anoped,buc->codped,buc->seqped,&pec);
    ret=VDEXECejecuta(proceso,buc,"#","%s#%s#%s#%s#%s#%s#%s#%s#%s",
		            pec.tipopedido,pec.coddiv,pec.codage,pec.codareaexped,pec.backorder,
					buc->tipobulto,buc->tipovol,buc->tipocaja,pec.swtmiscelaneo);
    return(ret);
}

// Proceso que procesa bultos en un estado concreto y llama al algoritmo que corresponda
// parámetros
// PARAM1: estado de los bultos
// PARAM2: tipo de comentario
// PARAM3: semáforo, se comprueba en el vdexec
VDEXPORT void vdprocesabultost(procesos *proceso) {
    int ret;
    vdbultocabs buc;
    char tipocomen[LTIPOCOMEN]=""; 
    vdstatuss sta;
    
    if (ret=damestabreviada("vdprocesabultost",proceso->proc.param, 1, "#", NULL, "BUC", &sta, 0)) return;
    if (BUCbuscastatus(sta.status,&buc)) return;
    
    ret=numpieces(proceso->proc.param,"#");
    piece(proceso->proc.param,tipocomen,"#",2);   

    do { 
        savepoint("vdprocesabultost");
        if (ret=BUClock(&buc,NOWAIT,VALIDA,"STATUS",NULL)){
            v10log(LOGERROR,"vdprocesabultost:Error bloqueando cabecera de bulto. %s\n\t%s\n",BUClog(&buc),
                   ret==VD_EERRBLOQUEO ? "El campo status ha sido modificado por otro proceso":"Error Oracle bloqueando campo status" );
            rollbacksavepoint("vdprocesabultost");        
            continue;
        }      
        v10log(LOGNORMAL,"vdprocesabultost: Procesando cabecera de bulto. %s\n",BUClog(&buc));

        ret=ejecutaalgoritmos(proceso,&buc);
        if (ret) {
            rollbacksavepoint("vdprocesabultost");
            buc.status=-buc.status;
            v10log(LOGERROR,"vdprocesabultost: ERROR %ld procesando bulto. %s \n",ret,BUClog(&buc));                    
        }
        ret=BUCactualizastatus(&buc,0);
        if (ret) {
            rollback();
            v10log(LOGERROR,"vdprocesabultost: ERROR %ld actualizando a estado %ld bulto. %s \n",ret,buc.status,BUClog(&buc));
        }               

        commit();
    }while (BUCnextstatus(&buc)==0);
}
